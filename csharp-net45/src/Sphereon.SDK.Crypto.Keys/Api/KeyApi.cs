/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Crypto.Keys.Client;
using Sphereon.SDK.Crypto.Keys.Model;

namespace Sphereon.SDK.Crypto.Keys.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        /// Creates a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>KeyBundle</returns>
        KeyBundle CreateKey (string config, CreateKeyRequest request);

        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        /// Creates a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> CreateKeyWithHttpInfo (string config, CreateKeyRequest request);
        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        /// Deletes a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>DeletedKeyBundleResponse</returns>
        DeletedKeyBundleResponse DeleteKey (string config, string name);

        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        /// Deletes a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>ApiResponse of DeletedKeyBundleResponse</returns>
        ApiResponse<DeletedKeyBundleResponse> DeleteKeyWithHttpInfo (string config, string name);
        /// <summary>
        /// Get key information
        /// </summary>
        /// <remarks>
        /// Gets information about a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>KeyBundleResponse</returns>
        KeyBundleResponse GetKey (string config, string name, string version);

        /// <summary>
        /// Get key information
        /// </summary>
        /// <remarks>
        /// Gets information about a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>ApiResponse of KeyBundleResponse</returns>
        ApiResponse<KeyBundleResponse> GetKeyWithHttpInfo (string config, string name, string version);
        /// <summary>
        /// Import key
        /// </summary>
        /// <remarks>
        /// Imports a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>KeyBundle</returns>
        KeyBundle ImportKey (string config, ImportKeyRequest request);

        /// <summary>
        /// Import key
        /// </summary>
        /// <remarks>
        /// Imports a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> ImportKeyWithHttpInfo (string config, ImportKeyRequest request);
        /// <summary>
        /// List keys metadata information
        /// </summary>
        /// <remarks>
        /// Gets a list of all key metadata
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>KeyMetadataListResponse</returns>
        KeyMetadataListResponse ListKeys (string config);

        /// <summary>
        /// List keys metadata information
        /// </summary>
        /// <remarks>
        /// Gets a list of all key metadata
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>ApiResponse of KeyMetadataListResponse</returns>
        ApiResponse<KeyMetadataListResponse> ListKeysWithHttpInfo (string config);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        /// Creates a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> CreateKeyAsync (string config, CreateKeyRequest request);

        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        /// Creates a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> CreateKeyAsyncWithHttpInfo (string config, CreateKeyRequest request);
        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        /// Deletes a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>Task of DeletedKeyBundleResponse</returns>
        System.Threading.Tasks.Task<DeletedKeyBundleResponse> DeleteKeyAsync (string config, string name);

        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        /// Deletes a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>Task of ApiResponse (DeletedKeyBundleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedKeyBundleResponse>> DeleteKeyAsyncWithHttpInfo (string config, string name);
        /// <summary>
        /// Get key information
        /// </summary>
        /// <remarks>
        /// Gets information about a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>Task of KeyBundleResponse</returns>
        System.Threading.Tasks.Task<KeyBundleResponse> GetKeyAsync (string config, string name, string version);

        /// <summary>
        /// Get key information
        /// </summary>
        /// <remarks>
        /// Gets information about a key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>Task of ApiResponse (KeyBundleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundleResponse>> GetKeyAsyncWithHttpInfo (string config, string name, string version);
        /// <summary>
        /// Import key
        /// </summary>
        /// <remarks>
        /// Imports a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> ImportKeyAsync (string config, ImportKeyRequest request);

        /// <summary>
        /// Import key
        /// </summary>
        /// <remarks>
        /// Imports a new key
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> ImportKeyAsyncWithHttpInfo (string config, ImportKeyRequest request);
        /// <summary>
        /// List keys metadata information
        /// </summary>
        /// <remarks>
        /// Gets a list of all key metadata
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>Task of KeyMetadataListResponse</returns>
        System.Threading.Tasks.Task<KeyMetadataListResponse> ListKeysAsync (string config);

        /// <summary>
        /// List keys metadata information
        /// </summary>
        /// <remarks>
        /// Gets a list of all key metadata
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>Task of ApiResponse (KeyMetadataListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyMetadataListResponse>> ListKeysAsyncWithHttpInfo (string config);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeyApi : IKeyApi
    {
        private Sphereon.SDK.Crypto.Keys.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeyApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Crypto.Keys.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Crypto.Keys.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Crypto.Keys.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create key Creates a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle CreateKey (string config, CreateKeyRequest request)
        {
             ApiResponse<KeyBundle> localVarResponse = CreateKeyWithHttpInfo(config, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create key Creates a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > CreateKeyWithHttpInfo (string config, CreateKeyRequest request)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->CreateKey");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling KeyApi->CreateKey");

            var localVarPath = "/{config}/keys/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Create key Creates a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> CreateKeyAsync (string config, CreateKeyRequest request)
        {
             ApiResponse<KeyBundle> localVarResponse = await CreateKeyAsyncWithHttpInfo(config, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create key Creates a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The create key request</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> CreateKeyAsyncWithHttpInfo (string config, CreateKeyRequest request)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->CreateKey");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling KeyApi->CreateKey");

            var localVarPath = "/{config}/keys/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Delete key Deletes a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>DeletedKeyBundleResponse</returns>
        public DeletedKeyBundleResponse DeleteKey (string config, string name)
        {
             ApiResponse<DeletedKeyBundleResponse> localVarResponse = DeleteKeyWithHttpInfo(config, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete key Deletes a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>ApiResponse of DeletedKeyBundleResponse</returns>
        public ApiResponse< DeletedKeyBundleResponse > DeleteKeyWithHttpInfo (string config, string name)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->DeleteKey");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling KeyApi->DeleteKey");

            var localVarPath = "/{config}/keys/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyBundleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyBundleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyBundleResponse)));
        }

        /// <summary>
        /// Delete key Deletes a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>Task of DeletedKeyBundleResponse</returns>
        public async System.Threading.Tasks.Task<DeletedKeyBundleResponse> DeleteKeyAsync (string config, string name)
        {
             ApiResponse<DeletedKeyBundleResponse> localVarResponse = await DeleteKeyAsyncWithHttpInfo(config, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete key Deletes a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <returns>Task of ApiResponse (DeletedKeyBundleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedKeyBundleResponse>> DeleteKeyAsyncWithHttpInfo (string config, string name)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->DeleteKey");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling KeyApi->DeleteKey");

            var localVarPath = "/{config}/keys/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyBundleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyBundleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyBundleResponse)));
        }

        /// <summary>
        /// Get key information Gets information about a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>KeyBundleResponse</returns>
        public KeyBundleResponse GetKey (string config, string name, string version)
        {
             ApiResponse<KeyBundleResponse> localVarResponse = GetKeyWithHttpInfo(config, name, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get key information Gets information about a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>ApiResponse of KeyBundleResponse</returns>
        public ApiResponse< KeyBundleResponse > GetKeyWithHttpInfo (string config, string name, string version)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->GetKey");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling KeyApi->GetKey");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling KeyApi->GetKey");

            var localVarPath = "/{config}/keys/{name}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundleResponse)));
        }

        /// <summary>
        /// Get key information Gets information about a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>Task of KeyBundleResponse</returns>
        public async System.Threading.Tasks.Task<KeyBundleResponse> GetKeyAsync (string config, string name, string version)
        {
             ApiResponse<KeyBundleResponse> localVarResponse = await GetKeyAsyncWithHttpInfo(config, name, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get key information Gets information about a key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="name">name</param>
        /// <param name="version">version</param>
        /// <returns>Task of ApiResponse (KeyBundleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundleResponse>> GetKeyAsyncWithHttpInfo (string config, string name, string version)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->GetKey");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling KeyApi->GetKey");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling KeyApi->GetKey");

            var localVarPath = "/{config}/keys/{name}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundleResponse)));
        }

        /// <summary>
        /// Import key Imports a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle ImportKey (string config, ImportKeyRequest request)
        {
             ApiResponse<KeyBundle> localVarResponse = ImportKeyWithHttpInfo(config, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import key Imports a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > ImportKeyWithHttpInfo (string config, ImportKeyRequest request)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->ImportKey");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling KeyApi->ImportKey");

            var localVarPath = "/{config}/keys/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Import key Imports a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> ImportKeyAsync (string config, ImportKeyRequest request)
        {
             ApiResponse<KeyBundle> localVarResponse = await ImportKeyAsyncWithHttpInfo(config, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import key Imports a new key
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <param name="request">The import key request</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> ImportKeyAsyncWithHttpInfo (string config, ImportKeyRequest request)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->ImportKey");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling KeyApi->ImportKey");

            var localVarPath = "/{config}/keys/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// List keys metadata information Gets a list of all key metadata
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>KeyMetadataListResponse</returns>
        public KeyMetadataListResponse ListKeys (string config)
        {
             ApiResponse<KeyMetadataListResponse> localVarResponse = ListKeysWithHttpInfo(config);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List keys metadata information Gets a list of all key metadata
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>ApiResponse of KeyMetadataListResponse</returns>
        public ApiResponse< KeyMetadataListResponse > ListKeysWithHttpInfo (string config)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->ListKeys");

            var localVarPath = "/{config}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyMetadataListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyMetadataListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyMetadataListResponse)));
        }

        /// <summary>
        /// List keys metadata information Gets a list of all key metadata
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>Task of KeyMetadataListResponse</returns>
        public async System.Threading.Tasks.Task<KeyMetadataListResponse> ListKeysAsync (string config)
        {
             ApiResponse<KeyMetadataListResponse> localVarResponse = await ListKeysAsyncWithHttpInfo(config);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List keys metadata information Gets a list of all key metadata
        /// </summary>
        /// <exception cref="Sphereon.SDK.Crypto.Keys.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">config</param>
        /// <returns>Task of ApiResponse (KeyMetadataListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyMetadataListResponse>> ListKeysAsyncWithHttpInfo (string config)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling KeyApi->ListKeys");

            var localVarPath = "/{config}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (config != null) localVarPathParams.Add("config", Configuration.ApiClient.ParameterToString(config)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyMetadataListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyMetadataListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyMetadataListResponse)));
        }

    }
}
