/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// Key Metadata
    /// </summary>
    [DataContract]
    public partial class DeletedKeyBundle :  IEquatable<DeletedKeyBundle>, IValidatableObject
    {
        /// <summary>
        /// The HSM Type if any
        /// </summary>
        /// <value>The HSM Type if any</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HsmTypeEnum
        {
            
            /// <summary>
            /// Enum NONE for "NONE"
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE,
            
            /// <summary>
            /// Enum AZUREKEYVAULTHSM for "AZURE_KEYVAULT_HSM"
            /// </summary>
            [EnumMember(Value = "AZURE_KEYVAULT_HSM")]
            AZUREKEYVAULTHSM
        }

        /// <summary>
        /// The HSM Type if any
        /// </summary>
        /// <value>The HSM Type if any</value>
        [DataMember(Name="hsmType", EmitDefaultValue=false)]
        public HsmTypeEnum? HsmType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedKeyBundle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeletedKeyBundle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedKeyBundle" /> class.
        /// </summary>
        /// <param name="ScheduledPurgeTime">ScheduledPurgeTime.</param>
        /// <param name="BackendMetadata">StorageType metadata. This is the place where additional metadata return from the backend is stored.</param>
        /// <param name="ApplicationMetadata">Application metadata. This is the place where you can store your own tags.</param>
        /// <param name="Managed">True if the key is backing a certificate.</param>
        /// <param name="Attributes">The attributes.</param>
        /// <param name="DeletedTime">DeletedTime.</param>
        /// <param name="RecoveryId">RecoveryId.</param>
        /// <param name="Key">The Json Web Key (required).</param>
        public DeletedKeyBundle(DateTime? ScheduledPurgeTime = default(DateTime?), Dictionary<string, string> BackendMetadata = default(Dictionary<string, string>), Dictionary<string, string> ApplicationMetadata = default(Dictionary<string, string>), bool? Managed = default(bool?), Attributes Attributes = default(Attributes), DateTime? DeletedTime = default(DateTime?), string RecoveryId = default(string), JsonWebKey Key = default(JsonWebKey))
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for DeletedKeyBundle and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            this.ScheduledPurgeTime = ScheduledPurgeTime;
            this.BackendMetadata = BackendMetadata;
            this.ApplicationMetadata = ApplicationMetadata;
            this.Managed = Managed;
            this.Attributes = Attributes;
            this.DeletedTime = DeletedTime;
            this.RecoveryId = RecoveryId;
        }
        

        /// <summary>
        /// Gets or Sets ScheduledPurgeTime
        /// </summary>
        [DataMember(Name="scheduledPurgeTime", EmitDefaultValue=false)]
        public DateTime? ScheduledPurgeTime { get; set; }

        /// <summary>
        /// StorageType metadata. This is the place where additional metadata return from the backend is stored
        /// </summary>
        /// <value>StorageType metadata. This is the place where additional metadata return from the backend is stored</value>
        [DataMember(Name="backendMetadata", EmitDefaultValue=false)]
        public Dictionary<string, string> BackendMetadata { get; set; }

        /// <summary>
        /// Application metadata. This is the place where you can store your own tags
        /// </summary>
        /// <value>Application metadata. This is the place where you can store your own tags</value>
        [DataMember(Name="applicationMetadata", EmitDefaultValue=false)]
        public Dictionary<string, string> ApplicationMetadata { get; set; }

        /// <summary>
        /// True if the key is backing a certificate
        /// </summary>
        /// <value>True if the key is backing a certificate</value>
        [DataMember(Name="managed", EmitDefaultValue=false)]
        public bool? Managed { get; set; }

        /// <summary>
        /// Key Id
        /// </summary>
        /// <value>Key Id</value>
        [DataMember(Name="kid", EmitDefaultValue=false)]
        public string Kid { get; private set; }

        /// <summary>
        /// The attributes
        /// </summary>
        /// <value>The attributes</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Attributes Attributes { get; set; }

        /// <summary>
        /// Gets or Sets DeletedTime
        /// </summary>
        [DataMember(Name="deletedTime", EmitDefaultValue=false)]
        public DateTime? DeletedTime { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryId
        /// </summary>
        [DataMember(Name="recoveryId", EmitDefaultValue=false)]
        public string RecoveryId { get; set; }

        /// <summary>
        /// The Json Web Key
        /// </summary>
        /// <value>The Json Web Key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public JsonWebKey Key { get; set; }

        /// <summary>
        /// Key URL
        /// </summary>
        /// <value>Key URL</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletedKeyBundle {\n");
            sb.Append("  HsmType: ").Append(HsmType).Append("\n");
            sb.Append("  ScheduledPurgeTime: ").Append(ScheduledPurgeTime).Append("\n");
            sb.Append("  BackendMetadata: ").Append(BackendMetadata).Append("\n");
            sb.Append("  ApplicationMetadata: ").Append(ApplicationMetadata).Append("\n");
            sb.Append("  Managed: ").Append(Managed).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  DeletedTime: ").Append(DeletedTime).Append("\n");
            sb.Append("  RecoveryId: ").Append(RecoveryId).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeletedKeyBundle);
        }

        /// <summary>
        /// Returns true if DeletedKeyBundle instances are equal
        /// </summary>
        /// <param name="other">Instance of DeletedKeyBundle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletedKeyBundle other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HsmType == other.HsmType ||
                    this.HsmType != null &&
                    this.HsmType.Equals(other.HsmType)
                ) && 
                (
                    this.ScheduledPurgeTime == other.ScheduledPurgeTime ||
                    this.ScheduledPurgeTime != null &&
                    this.ScheduledPurgeTime.Equals(other.ScheduledPurgeTime)
                ) && 
                (
                    this.BackendMetadata == other.BackendMetadata ||
                    this.BackendMetadata != null &&
                    this.BackendMetadata.SequenceEqual(other.BackendMetadata)
                ) && 
                (
                    this.ApplicationMetadata == other.ApplicationMetadata ||
                    this.ApplicationMetadata != null &&
                    this.ApplicationMetadata.SequenceEqual(other.ApplicationMetadata)
                ) && 
                (
                    this.Managed == other.Managed ||
                    this.Managed != null &&
                    this.Managed.Equals(other.Managed)
                ) && 
                (
                    this.Kid == other.Kid ||
                    this.Kid != null &&
                    this.Kid.Equals(other.Kid)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                ) && 
                (
                    this.DeletedTime == other.DeletedTime ||
                    this.DeletedTime != null &&
                    this.DeletedTime.Equals(other.DeletedTime)
                ) && 
                (
                    this.RecoveryId == other.RecoveryId ||
                    this.RecoveryId != null &&
                    this.RecoveryId.Equals(other.RecoveryId)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HsmType != null)
                    hash = hash * 59 + this.HsmType.GetHashCode();
                if (this.ScheduledPurgeTime != null)
                    hash = hash * 59 + this.ScheduledPurgeTime.GetHashCode();
                if (this.BackendMetadata != null)
                    hash = hash * 59 + this.BackendMetadata.GetHashCode();
                if (this.ApplicationMetadata != null)
                    hash = hash * 59 + this.ApplicationMetadata.GetHashCode();
                if (this.Managed != null)
                    hash = hash * 59 + this.Managed.GetHashCode();
                if (this.Kid != null)
                    hash = hash * 59 + this.Kid.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.DeletedTime != null)
                    hash = hash * 59 + this.DeletedTime.GetHashCode();
                if (this.RecoveryId != null)
                    hash = hash * 59 + this.RecoveryId.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
