/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// Lifetime action and trigger for certificate
    /// </summary>
    [DataContract]
    public partial class LifetimeAction :  IEquatable<LifetimeAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LifetimeAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeAction" /> class.
        /// </summary>
        /// <param name="Action">The action that will be performed (required).</param>
        /// <param name="Trigger">The trigger condition for the action (required).</param>
        public LifetimeAction(Action Action = default(Action), Trigger Trigger = default(Trigger))
        {
            // to ensure "Action" is required (not null)
            if (Action == null)
            {
                throw new InvalidDataException("Action is a required property for LifetimeAction and cannot be null");
            }
            else
            {
                this.Action = Action;
            }
            // to ensure "Trigger" is required (not null)
            if (Trigger == null)
            {
                throw new InvalidDataException("Trigger is a required property for LifetimeAction and cannot be null");
            }
            else
            {
                this.Trigger = Trigger;
            }
        }
        
        /// <summary>
        /// The action that will be performed
        /// </summary>
        /// <value>The action that will be performed</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public Action Action { get; set; }

        /// <summary>
        /// The trigger condition for the action
        /// </summary>
        /// <value>The trigger condition for the action</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public Trigger Trigger { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LifetimeAction {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LifetimeAction);
        }

        /// <summary>
        /// Returns true if LifetimeAction instances are equal
        /// </summary>
        /// <param name="other">Instance of LifetimeAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LifetimeAction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Trigger == other.Trigger ||
                    this.Trigger != null &&
                    this.Trigger.Equals(other.Trigger)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Trigger != null)
                    hash = hash * 59 + this.Trigger.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
