/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// AzureKeyVaultSettings
    /// </summary>
    [DataContract]
    public partial class AzureKeyVaultSettings :  IEquatable<AzureKeyVaultSettings>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnvironmentEnum
        {
            
            /// <summary>
            /// Enum AZURE for "AZURE"
            /// </summary>
            [EnumMember(Value = "AZURE")]
            AZURE,
            
            /// <summary>
            /// Enum AZURECHINA for "AZURE_CHINA"
            /// </summary>
            [EnumMember(Value = "AZURE_CHINA")]
            AZURECHINA,
            
            /// <summary>
            /// Enum AZUREGERMANY for "AZURE_GERMANY"
            /// </summary>
            [EnumMember(Value = "AZURE_GERMANY")]
            AZUREGERMANY,
            
            /// <summary>
            /// Enum AZUREUSGOVERNMENT for "AZURE_US_GOVERNMENT"
            /// </summary>
            [EnumMember(Value = "AZURE_US_GOVERNMENT")]
            AZUREUSGOVERNMENT
        }

        /// <summary>
        /// Gets or Sets HsmUsage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HsmUsageEnum
        {
            
            /// <summary>
            /// Enum DISALLOW for "DISALLOW"
            /// </summary>
            [EnumMember(Value = "DISALLOW")]
            DISALLOW,
            
            /// <summary>
            /// Enum OPTIONAL for "OPTIONAL"
            /// </summary>
            [EnumMember(Value = "OPTIONAL")]
            OPTIONAL,
            
            /// <summary>
            /// Enum PREFER for "PREFER"
            /// </summary>
            [EnumMember(Value = "PREFER")]
            PREFER,
            
            /// <summary>
            /// Enum REQUIRE for "REQUIRE"
            /// </summary>
            [EnumMember(Value = "REQUIRE")]
            REQUIRE
        }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RegionEnum
        {
            
            /// <summary>
            /// Enum USWEST for "US_WEST"
            /// </summary>
            [EnumMember(Value = "US_WEST")]
            USWEST,
            
            /// <summary>
            /// Enum USWEST2 for "US_WEST2"
            /// </summary>
            [EnumMember(Value = "US_WEST2")]
            USWEST2,
            
            /// <summary>
            /// Enum USCENTRAL for "US_CENTRAL"
            /// </summary>
            [EnumMember(Value = "US_CENTRAL")]
            USCENTRAL,
            
            /// <summary>
            /// Enum USEAST for "US_EAST"
            /// </summary>
            [EnumMember(Value = "US_EAST")]
            USEAST,
            
            /// <summary>
            /// Enum USEAST2 for "US_EAST2"
            /// </summary>
            [EnumMember(Value = "US_EAST2")]
            USEAST2,
            
            /// <summary>
            /// Enum USNORTHCENTRAL for "US_NORTH_CENTRAL"
            /// </summary>
            [EnumMember(Value = "US_NORTH_CENTRAL")]
            USNORTHCENTRAL,
            
            /// <summary>
            /// Enum USSOUTHCENTRAL for "US_SOUTH_CENTRAL"
            /// </summary>
            [EnumMember(Value = "US_SOUTH_CENTRAL")]
            USSOUTHCENTRAL,
            
            /// <summary>
            /// Enum USWESTCENTRAL for "US_WEST_CENTRAL"
            /// </summary>
            [EnumMember(Value = "US_WEST_CENTRAL")]
            USWESTCENTRAL,
            
            /// <summary>
            /// Enum CANADACENTRAL for "CANADA_CENTRAL"
            /// </summary>
            [EnumMember(Value = "CANADA_CENTRAL")]
            CANADACENTRAL,
            
            /// <summary>
            /// Enum CANADAEAST for "CANADA_EAST"
            /// </summary>
            [EnumMember(Value = "CANADA_EAST")]
            CANADAEAST,
            
            /// <summary>
            /// Enum BRAZILSOUTH for "BRAZIL_SOUTH"
            /// </summary>
            [EnumMember(Value = "BRAZIL_SOUTH")]
            BRAZILSOUTH,
            
            /// <summary>
            /// Enum EUROPENORTH for "EUROPE_NORTH"
            /// </summary>
            [EnumMember(Value = "EUROPE_NORTH")]
            EUROPENORTH,
            
            /// <summary>
            /// Enum EUROPEWEST for "EUROPE_WEST"
            /// </summary>
            [EnumMember(Value = "EUROPE_WEST")]
            EUROPEWEST,
            
            /// <summary>
            /// Enum UKSOUTH for "UK_SOUTH"
            /// </summary>
            [EnumMember(Value = "UK_SOUTH")]
            UKSOUTH,
            
            /// <summary>
            /// Enum UKWEST for "UK_WEST"
            /// </summary>
            [EnumMember(Value = "UK_WEST")]
            UKWEST,
            
            /// <summary>
            /// Enum ASIAEAST for "ASIA_EAST"
            /// </summary>
            [EnumMember(Value = "ASIA_EAST")]
            ASIAEAST,
            
            /// <summary>
            /// Enum ASIASOUTHEAST for "ASIA_SOUTHEAST"
            /// </summary>
            [EnumMember(Value = "ASIA_SOUTHEAST")]
            ASIASOUTHEAST,
            
            /// <summary>
            /// Enum JAPANEAST for "JAPAN_EAST"
            /// </summary>
            [EnumMember(Value = "JAPAN_EAST")]
            JAPANEAST,
            
            /// <summary>
            /// Enum JAPANWEST for "JAPAN_WEST"
            /// </summary>
            [EnumMember(Value = "JAPAN_WEST")]
            JAPANWEST,
            
            /// <summary>
            /// Enum AUSTRALIAEAST for "AUSTRALIA_EAST"
            /// </summary>
            [EnumMember(Value = "AUSTRALIA_EAST")]
            AUSTRALIAEAST,
            
            /// <summary>
            /// Enum AUSTRALIASOUTHEAST for "AUSTRALIA_SOUTHEAST"
            /// </summary>
            [EnumMember(Value = "AUSTRALIA_SOUTHEAST")]
            AUSTRALIASOUTHEAST,
            
            /// <summary>
            /// Enum INDIACENTRAL for "INDIA_CENTRAL"
            /// </summary>
            [EnumMember(Value = "INDIA_CENTRAL")]
            INDIACENTRAL,
            
            /// <summary>
            /// Enum INDIASOUTH for "INDIA_SOUTH"
            /// </summary>
            [EnumMember(Value = "INDIA_SOUTH")]
            INDIASOUTH,
            
            /// <summary>
            /// Enum INDIAWEST for "INDIA_WEST"
            /// </summary>
            [EnumMember(Value = "INDIA_WEST")]
            INDIAWEST,
            
            /// <summary>
            /// Enum KOREACENTRAL for "KOREA_CENTRAL"
            /// </summary>
            [EnumMember(Value = "KOREA_CENTRAL")]
            KOREACENTRAL,
            
            /// <summary>
            /// Enum KOREASOUTH for "KOREA_SOUTH"
            /// </summary>
            [EnumMember(Value = "KOREA_SOUTH")]
            KOREASOUTH,
            
            /// <summary>
            /// Enum CHINANORTH for "CHINA_NORTH"
            /// </summary>
            [EnumMember(Value = "CHINA_NORTH")]
            CHINANORTH,
            
            /// <summary>
            /// Enum CHINAEAST for "CHINA_EAST"
            /// </summary>
            [EnumMember(Value = "CHINA_EAST")]
            CHINAEAST,
            
            /// <summary>
            /// Enum GERMANYCENTRAL for "GERMANY_CENTRAL"
            /// </summary>
            [EnumMember(Value = "GERMANY_CENTRAL")]
            GERMANYCENTRAL,
            
            /// <summary>
            /// Enum GERMANYNORTHEAST for "GERMANY_NORTHEAST"
            /// </summary>
            [EnumMember(Value = "GERMANY_NORTHEAST")]
            GERMANYNORTHEAST,
            
            /// <summary>
            /// Enum GOVUSVIRGINIA for "GOV_US_VIRGINIA"
            /// </summary>
            [EnumMember(Value = "GOV_US_VIRGINIA")]
            GOVUSVIRGINIA,
            
            /// <summary>
            /// Enum GOVUSIOWA for "GOV_US_IOWA"
            /// </summary>
            [EnumMember(Value = "GOV_US_IOWA")]
            GOVUSIOWA
        }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public EnvironmentEnum? Environment { get; set; }
        /// <summary>
        /// Gets or Sets HsmUsage
        /// </summary>
        [DataMember(Name="hsmUsage", EmitDefaultValue=false)]
        public HsmUsageEnum? HsmUsage { get; set; }
        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public RegionEnum? Region { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureKeyVaultSettings" /> class.
        /// </summary>
        /// <param name="ResourceGroup">ResourceGroup.</param>
        /// <param name="Environment">Environment.</param>
        /// <param name="KeyVaultName">KeyVaultName.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="HsmUsage">HsmUsage.</param>
        /// <param name="KeyVaultURL">KeyVaultURL.</param>
        /// <param name="ClientSecret">ClientSecret.</param>
        /// <param name="Region">Region.</param>
        /// <param name="SubscriptionId">SubscriptionId.</param>
        /// <param name="Tenant">Tenant.</param>
        public AzureKeyVaultSettings(string ResourceGroup = default(string), EnvironmentEnum? Environment = default(EnvironmentEnum?), string KeyVaultName = default(string), string ClientId = default(string), HsmUsageEnum? HsmUsage = default(HsmUsageEnum?), string KeyVaultURL = default(string), string ClientSecret = default(string), RegionEnum? Region = default(RegionEnum?), string SubscriptionId = default(string), string Tenant = default(string))
        {
            this.ResourceGroup = ResourceGroup;
            this.Environment = Environment;
            this.KeyVaultName = KeyVaultName;
            this.ClientId = ClientId;
            this.HsmUsage = HsmUsage;
            this.KeyVaultURL = KeyVaultURL;
            this.ClientSecret = ClientSecret;
            this.Region = Region;
            this.SubscriptionId = SubscriptionId;
            this.Tenant = Tenant;
        }
        
        /// <summary>
        /// Gets or Sets ResourceGroup
        /// </summary>
        [DataMember(Name="resourceGroup", EmitDefaultValue=false)]
        public string ResourceGroup { get; set; }


        /// <summary>
        /// Gets or Sets KeyVaultName
        /// </summary>
        [DataMember(Name="keyVaultName", EmitDefaultValue=false)]
        public string KeyVaultName { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }


        /// <summary>
        /// Gets or Sets KeyVaultURL
        /// </summary>
        [DataMember(Name="keyVaultURL", EmitDefaultValue=false)]
        public string KeyVaultURL { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }


        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscriptionId", EmitDefaultValue=false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public string Tenant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AzureKeyVaultSettings {\n");
            sb.Append("  ResourceGroup: ").Append(ResourceGroup).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  KeyVaultName: ").Append(KeyVaultName).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  HsmUsage: ").Append(HsmUsage).Append("\n");
            sb.Append("  KeyVaultURL: ").Append(KeyVaultURL).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AzureKeyVaultSettings);
        }

        /// <summary>
        /// Returns true if AzureKeyVaultSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of AzureKeyVaultSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AzureKeyVaultSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ResourceGroup == other.ResourceGroup ||
                    this.ResourceGroup != null &&
                    this.ResourceGroup.Equals(other.ResourceGroup)
                ) && 
                (
                    this.Environment == other.Environment ||
                    this.Environment != null &&
                    this.Environment.Equals(other.Environment)
                ) && 
                (
                    this.KeyVaultName == other.KeyVaultName ||
                    this.KeyVaultName != null &&
                    this.KeyVaultName.Equals(other.KeyVaultName)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.HsmUsage == other.HsmUsage ||
                    this.HsmUsage != null &&
                    this.HsmUsage.Equals(other.HsmUsage)
                ) && 
                (
                    this.KeyVaultURL == other.KeyVaultURL ||
                    this.KeyVaultURL != null &&
                    this.KeyVaultURL.Equals(other.KeyVaultURL)
                ) && 
                (
                    this.ClientSecret == other.ClientSecret ||
                    this.ClientSecret != null &&
                    this.ClientSecret.Equals(other.ClientSecret)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.SubscriptionId == other.SubscriptionId ||
                    this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    this.Tenant == other.Tenant ||
                    this.Tenant != null &&
                    this.Tenant.Equals(other.Tenant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ResourceGroup != null)
                    hash = hash * 59 + this.ResourceGroup.GetHashCode();
                if (this.Environment != null)
                    hash = hash * 59 + this.Environment.GetHashCode();
                if (this.KeyVaultName != null)
                    hash = hash * 59 + this.KeyVaultName.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.HsmUsage != null)
                    hash = hash * 59 + this.HsmUsage.GetHashCode();
                if (this.KeyVaultURL != null)
                    hash = hash * 59 + this.KeyVaultURL.GetHashCode();
                if (this.ClientSecret != null)
                    hash = hash * 59 + this.ClientSecret.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.SubscriptionId != null)
                    hash = hash * 59 + this.SubscriptionId.GetHashCode();
                if (this.Tenant != null)
                    hash = hash * 59 + this.Tenant.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
