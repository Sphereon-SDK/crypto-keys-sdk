/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// Imports an existing valid certificate, containing a private key. The certificate can be supplied in PFX and PEM format. When using PEM format, it must contain the key as well as x509 certificate(s).
    /// </summary>
    [DataContract]
    public partial class ImportCertificateRequest :  IEquatable<ImportCertificateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportCertificateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportCertificateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportCertificateRequest" /> class.
        /// </summary>
        /// <param name="Password">If the private key has a password it needs to be supplied here.</param>
        /// <param name="ApplicationMetadata">Application specific metadata.</param>
        /// <param name="Certificate">Base64 encoded representation of the certificate to import. It needs to contain the private key (required).</param>
        /// <param name="Name">Certificate name (required).</param>
        /// <param name="Attributes">Certificate attributes.</param>
        /// <param name="Policy">Certificate policy (required).</param>
        public ImportCertificateRequest(string Password = default(string), Dictionary<string, string> ApplicationMetadata = default(Dictionary<string, string>), string Certificate = default(string), string Name = default(string), Attributes Attributes = default(Attributes), CertificatePolicy Policy = default(CertificatePolicy))
        {
            // to ensure "Certificate" is required (not null)
            if (Certificate == null)
            {
                throw new InvalidDataException("Certificate is a required property for ImportCertificateRequest and cannot be null");
            }
            else
            {
                this.Certificate = Certificate;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ImportCertificateRequest and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Policy" is required (not null)
            if (Policy == null)
            {
                throw new InvalidDataException("Policy is a required property for ImportCertificateRequest and cannot be null");
            }
            else
            {
                this.Policy = Policy;
            }
            this.Password = Password;
            this.ApplicationMetadata = ApplicationMetadata;
            this.Attributes = Attributes;
        }
        
        /// <summary>
        /// If the private key has a password it needs to be supplied here
        /// </summary>
        /// <value>If the private key has a password it needs to be supplied here</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Application specific metadata
        /// </summary>
        /// <value>Application specific metadata</value>
        [DataMember(Name="applicationMetadata", EmitDefaultValue=false)]
        public Dictionary<string, string> ApplicationMetadata { get; set; }

        /// <summary>
        /// Base64 encoded representation of the certificate to import. It needs to contain the private key
        /// </summary>
        /// <value>Base64 encoded representation of the certificate to import. It needs to contain the private key</value>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public string Certificate { get; set; }

        /// <summary>
        /// Certificate name
        /// </summary>
        /// <value>Certificate name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Certificate attributes
        /// </summary>
        /// <value>Certificate attributes</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Attributes Attributes { get; set; }

        /// <summary>
        /// Certificate policy
        /// </summary>
        /// <value>Certificate policy</value>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public CertificatePolicy Policy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportCertificateRequest {\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ApplicationMetadata: ").Append(ApplicationMetadata).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportCertificateRequest);
        }

        /// <summary>
        /// Returns true if ImportCertificateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportCertificateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportCertificateRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.ApplicationMetadata == other.ApplicationMetadata ||
                    this.ApplicationMetadata != null &&
                    this.ApplicationMetadata.SequenceEqual(other.ApplicationMetadata)
                ) && 
                (
                    this.Certificate == other.Certificate ||
                    this.Certificate != null &&
                    this.Certificate.Equals(other.Certificate)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                ) && 
                (
                    this.Policy == other.Policy ||
                    this.Policy != null &&
                    this.Policy.Equals(other.Policy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.ApplicationMetadata != null)
                    hash = hash * 59 + this.ApplicationMetadata.GetHashCode();
                if (this.Certificate != null)
                    hash = hash * 59 + this.Certificate.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.Policy != null)
                    hash = hash * 59 + this.Policy.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
