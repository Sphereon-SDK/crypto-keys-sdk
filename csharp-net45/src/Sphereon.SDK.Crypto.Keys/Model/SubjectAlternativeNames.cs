/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// Subject Alternative Names
    /// </summary>
    [DataContract]
    public partial class SubjectAlternativeNames :  IEquatable<SubjectAlternativeNames>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectAlternativeNames" /> class.
        /// </summary>
        /// <param name="EmailAddresses">Email adresses.</param>
        /// <param name="DnsNames">Domain names.</param>
        /// <param name="UserPrincipalNames">User principal names.</param>
        public SubjectAlternativeNames(List<string> EmailAddresses = default(List<string>), List<string> DnsNames = default(List<string>), List<string> UserPrincipalNames = default(List<string>))
        {
            this.EmailAddresses = EmailAddresses;
            this.DnsNames = DnsNames;
            this.UserPrincipalNames = UserPrincipalNames;
        }
        
        /// <summary>
        /// Email adresses
        /// </summary>
        /// <value>Email adresses</value>
        [DataMember(Name="emailAddresses", EmitDefaultValue=false)]
        public List<string> EmailAddresses { get; set; }

        /// <summary>
        /// Domain names
        /// </summary>
        /// <value>Domain names</value>
        [DataMember(Name="dnsNames", EmitDefaultValue=false)]
        public List<string> DnsNames { get; set; }

        /// <summary>
        /// User principal names
        /// </summary>
        /// <value>User principal names</value>
        [DataMember(Name="userPrincipalNames", EmitDefaultValue=false)]
        public List<string> UserPrincipalNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubjectAlternativeNames {\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  DnsNames: ").Append(DnsNames).Append("\n");
            sb.Append("  UserPrincipalNames: ").Append(UserPrincipalNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubjectAlternativeNames);
        }

        /// <summary>
        /// Returns true if SubjectAlternativeNames instances are equal
        /// </summary>
        /// <param name="other">Instance of SubjectAlternativeNames to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubjectAlternativeNames other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EmailAddresses == other.EmailAddresses ||
                    this.EmailAddresses != null &&
                    this.EmailAddresses.SequenceEqual(other.EmailAddresses)
                ) && 
                (
                    this.DnsNames == other.DnsNames ||
                    this.DnsNames != null &&
                    this.DnsNames.SequenceEqual(other.DnsNames)
                ) && 
                (
                    this.UserPrincipalNames == other.UserPrincipalNames ||
                    this.UserPrincipalNames != null &&
                    this.UserPrincipalNames.SequenceEqual(other.UserPrincipalNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EmailAddresses != null)
                    hash = hash * 59 + this.EmailAddresses.GetHashCode();
                if (this.DnsNames != null)
                    hash = hash * 59 + this.DnsNames.GetHashCode();
                if (this.UserPrincipalNames != null)
                    hash = hash * 59 + this.UserPrincipalNames.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
