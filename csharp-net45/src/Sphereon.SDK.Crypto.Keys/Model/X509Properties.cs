/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// X509Properties
    /// </summary>
    [DataContract]
    public partial class X509Properties :  IEquatable<X509Properties>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets KeyUsage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyUsageEnum
        {
            
            /// <summary>
            /// Enum DIGITALSIGNATURE for "DIGITAL_SIGNATURE"
            /// </summary>
            [EnumMember(Value = "DIGITAL_SIGNATURE")]
            DIGITALSIGNATURE,
            
            /// <summary>
            /// Enum NONREPUDIATION for "NON_REPUDIATION"
            /// </summary>
            [EnumMember(Value = "NON_REPUDIATION")]
            NONREPUDIATION,
            
            /// <summary>
            /// Enum KEYENCIPHERMENT for "KEY_ENCIPHERMENT"
            /// </summary>
            [EnumMember(Value = "KEY_ENCIPHERMENT")]
            KEYENCIPHERMENT,
            
            /// <summary>
            /// Enum DATAENCIPHERMENT for "DATA_ENCIPHERMENT"
            /// </summary>
            [EnumMember(Value = "DATA_ENCIPHERMENT")]
            DATAENCIPHERMENT,
            
            /// <summary>
            /// Enum KEYAGREEMENT for "KEY_AGREEMENT"
            /// </summary>
            [EnumMember(Value = "KEY_AGREEMENT")]
            KEYAGREEMENT,
            
            /// <summary>
            /// Enum KEYCERTSIGN for "KEY_CERT_SIGN"
            /// </summary>
            [EnumMember(Value = "KEY_CERT_SIGN")]
            KEYCERTSIGN,
            
            /// <summary>
            /// Enum CRLSIGN for "CRL_SIGN"
            /// </summary>
            [EnumMember(Value = "CRL_SIGN")]
            CRLSIGN,
            
            /// <summary>
            /// Enum ENCIPHERONLY for "ENCIPHER_ONLY"
            /// </summary>
            [EnumMember(Value = "ENCIPHER_ONLY")]
            ENCIPHERONLY,
            
            /// <summary>
            /// Enum DECIPHERONLY for "DECIPHER_ONLY"
            /// </summary>
            [EnumMember(Value = "DECIPHER_ONLY")]
            DECIPHERONLY
        }

        /// <summary>
        /// List of key usages
        /// </summary>
        /// <value>List of key usages</value>
        [DataMember(Name="keyUsage", EmitDefaultValue=false)]
        public List<KeyUsageEnum> KeyUsage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="X509Properties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected X509Properties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="X509Properties" /> class.
        /// </summary>
        /// <param name="EnhancedKeyUsage">Enhanced key usage.</param>
        /// <param name="KeyUsage">List of key usages (required).</param>
        /// <param name="ValidityMonths">Certificate validity in months (required).</param>
        /// <param name="Sans">Subject alternative name.</param>
        /// <param name="Subject">Subject name. Should be a valid X509 Distinguished Name (required).</param>
        public X509Properties(List<string> EnhancedKeyUsage = default(List<string>), List<KeyUsageEnum> KeyUsage = default(List<KeyUsageEnum>), int? ValidityMonths = default(int?), SubjectAlternativeNames Sans = default(SubjectAlternativeNames), string Subject = default(string))
        {
            // to ensure "KeyUsage" is required (not null)
            if (KeyUsage == null)
            {
                throw new InvalidDataException("KeyUsage is a required property for X509Properties and cannot be null");
            }
            else
            {
                this.KeyUsage = KeyUsage;
            }
            // to ensure "ValidityMonths" is required (not null)
            if (ValidityMonths == null)
            {
                throw new InvalidDataException("ValidityMonths is a required property for X509Properties and cannot be null");
            }
            else
            {
                this.ValidityMonths = ValidityMonths;
            }
            // to ensure "Subject" is required (not null)
            if (Subject == null)
            {
                throw new InvalidDataException("Subject is a required property for X509Properties and cannot be null");
            }
            else
            {
                this.Subject = Subject;
            }
            this.EnhancedKeyUsage = EnhancedKeyUsage;
            this.Sans = Sans;
        }
        
        /// <summary>
        /// Enhanced key usage
        /// </summary>
        /// <value>Enhanced key usage</value>
        [DataMember(Name="enhancedKeyUsage", EmitDefaultValue=false)]
        public List<string> EnhancedKeyUsage { get; set; }


        /// <summary>
        /// Certificate validity in months
        /// </summary>
        /// <value>Certificate validity in months</value>
        [DataMember(Name="validityMonths", EmitDefaultValue=false)]
        public int? ValidityMonths { get; set; }

        /// <summary>
        /// Subject alternative name
        /// </summary>
        /// <value>Subject alternative name</value>
        [DataMember(Name="sans", EmitDefaultValue=false)]
        public SubjectAlternativeNames Sans { get; set; }

        /// <summary>
        /// Subject name. Should be a valid X509 Distinguished Name
        /// </summary>
        /// <value>Subject name. Should be a valid X509 Distinguished Name</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class X509Properties {\n");
            sb.Append("  EnhancedKeyUsage: ").Append(EnhancedKeyUsage).Append("\n");
            sb.Append("  KeyUsage: ").Append(KeyUsage).Append("\n");
            sb.Append("  ValidityMonths: ").Append(ValidityMonths).Append("\n");
            sb.Append("  Sans: ").Append(Sans).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as X509Properties);
        }

        /// <summary>
        /// Returns true if X509Properties instances are equal
        /// </summary>
        /// <param name="other">Instance of X509Properties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(X509Properties other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EnhancedKeyUsage == other.EnhancedKeyUsage ||
                    this.EnhancedKeyUsage != null &&
                    this.EnhancedKeyUsage.SequenceEqual(other.EnhancedKeyUsage)
                ) && 
                (
                    this.KeyUsage == other.KeyUsage ||
                    this.KeyUsage != null &&
                    this.KeyUsage.SequenceEqual(other.KeyUsage)
                ) && 
                (
                    this.ValidityMonths == other.ValidityMonths ||
                    this.ValidityMonths != null &&
                    this.ValidityMonths.Equals(other.ValidityMonths)
                ) && 
                (
                    this.Sans == other.Sans ||
                    this.Sans != null &&
                    this.Sans.Equals(other.Sans)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EnhancedKeyUsage != null)
                    hash = hash * 59 + this.EnhancedKeyUsage.GetHashCode();
                if (this.KeyUsage != null)
                    hash = hash * 59 + this.KeyUsage.GetHashCode();
                if (this.ValidityMonths != null)
                    hash = hash * 59 + this.ValidityMonths.GetHashCode();
                if (this.Sans != null)
                    hash = hash * 59 + this.Sans.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
