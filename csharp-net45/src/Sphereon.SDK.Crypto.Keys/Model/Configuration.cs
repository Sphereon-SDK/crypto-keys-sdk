/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Crypto.Keys.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Crypto.Keys.Model
{
    /// <summary>
    /// Configuration
    /// </summary>
    [DataContract]
    public partial class Configuration :  IEquatable<Configuration>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ImplementationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImplementationTypeEnum
        {
            
            /// <summary>
            /// Enum AZUREKEYVAULTMANAGED for "AZURE_KEYVAULT_MANAGED"
            /// </summary>
            [EnumMember(Value = "AZURE_KEYVAULT_MANAGED")]
            AZUREKEYVAULTMANAGED,
            
            /// <summary>
            /// Enum AZUREKEYVAULTDEDICATED for "AZURE_KEYVAULT_DEDICATED"
            /// </summary>
            [EnumMember(Value = "AZURE_KEYVAULT_DEDICATED")]
            AZUREKEYVAULTDEDICATED,
            
            /// <summary>
            /// Enum KEYSTOREFILE for "KEYSTORE_FILE"
            /// </summary>
            [EnumMember(Value = "KEYSTORE_FILE")]
            KEYSTOREFILE
        }

        /// <summary>
        /// Gets or Sets StorageTypeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageTypeTypeEnum
        {
            
            /// <summary>
            /// Enum AZUREKEYVAULT for "AZURE_KEYVAULT"
            /// </summary>
            [EnumMember(Value = "AZURE_KEYVAULT")]
            AZUREKEYVAULT,
            
            /// <summary>
            /// Enum LOCALSTORAGE for "LOCAL_STORAGE"
            /// </summary>
            [EnumMember(Value = "LOCAL_STORAGE")]
            LOCALSTORAGE
        }

        /// <summary>
        /// Gets or Sets ImplementationType
        /// </summary>
        [DataMember(Name="implementationType", EmitDefaultValue=false)]
        public ImplementationTypeEnum? ImplementationType { get; set; }
        /// <summary>
        /// Gets or Sets StorageTypeType
        /// </summary>
        [DataMember(Name="storageTypeType", EmitDefaultValue=false)]
        public StorageTypeTypeEnum? StorageTypeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Configuration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class.
        /// </summary>
        /// <param name="AzureKeyVaultSettings">AzureKeyVaultSettings.</param>
        /// <param name="ImplementationType">ImplementationType.</param>
        /// <param name="LocalStorageSettings">LocalStorageSettings.</param>
        /// <param name="StorageTypeType">StorageTypeType.</param>
        /// <param name="Name">The name as it appears in the urls. Allowed values hexadecimal characters and - (required).</param>
        public Configuration(AzureKeyVaultSettings AzureKeyVaultSettings = default(AzureKeyVaultSettings), ImplementationTypeEnum? ImplementationType = default(ImplementationTypeEnum?), LocalStorageSettings LocalStorageSettings = default(LocalStorageSettings), StorageTypeTypeEnum? StorageTypeType = default(StorageTypeTypeEnum?), string Name = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Configuration and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.AzureKeyVaultSettings = AzureKeyVaultSettings;
            this.ImplementationType = ImplementationType;
            this.LocalStorageSettings = LocalStorageSettings;
            this.StorageTypeType = StorageTypeType;
        }
        
        /// <summary>
        /// Gets or Sets AzureKeyVaultSettings
        /// </summary>
        [DataMember(Name="azureKeyVaultSettings", EmitDefaultValue=false)]
        public AzureKeyVaultSettings AzureKeyVaultSettings { get; set; }


        /// <summary>
        /// Gets or Sets LocalStorageSettings
        /// </summary>
        [DataMember(Name="localStorageSettings", EmitDefaultValue=false)]
        public LocalStorageSettings LocalStorageSettings { get; set; }


        /// <summary>
        /// The name as it appears in the urls. Allowed values hexadecimal characters and -
        /// </summary>
        /// <value>The name as it appears in the urls. Allowed values hexadecimal characters and -</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The id of the configuration
        /// </summary>
        /// <value>The id of the configuration</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Configuration {\n");
            sb.Append("  AzureKeyVaultSettings: ").Append(AzureKeyVaultSettings).Append("\n");
            sb.Append("  ImplementationType: ").Append(ImplementationType).Append("\n");
            sb.Append("  LocalStorageSettings: ").Append(LocalStorageSettings).Append("\n");
            sb.Append("  StorageTypeType: ").Append(StorageTypeType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Configuration);
        }

        /// <summary>
        /// Returns true if Configuration instances are equal
        /// </summary>
        /// <param name="other">Instance of Configuration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Configuration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AzureKeyVaultSettings == other.AzureKeyVaultSettings ||
                    this.AzureKeyVaultSettings != null &&
                    this.AzureKeyVaultSettings.Equals(other.AzureKeyVaultSettings)
                ) && 
                (
                    this.ImplementationType == other.ImplementationType ||
                    this.ImplementationType != null &&
                    this.ImplementationType.Equals(other.ImplementationType)
                ) && 
                (
                    this.LocalStorageSettings == other.LocalStorageSettings ||
                    this.LocalStorageSettings != null &&
                    this.LocalStorageSettings.Equals(other.LocalStorageSettings)
                ) && 
                (
                    this.StorageTypeType == other.StorageTypeType ||
                    this.StorageTypeType != null &&
                    this.StorageTypeType.Equals(other.StorageTypeType)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AzureKeyVaultSettings != null)
                    hash = hash * 59 + this.AzureKeyVaultSettings.GetHashCode();
                if (this.ImplementationType != null)
                    hash = hash * 59 + this.ImplementationType.GetHashCode();
                if (this.LocalStorageSettings != null)
                    hash = hash * 59 + this.LocalStorageSettings.GetHashCode();
                if (this.StorageTypeType != null)
                    hash = hash * 59 + this.StorageTypeType.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
