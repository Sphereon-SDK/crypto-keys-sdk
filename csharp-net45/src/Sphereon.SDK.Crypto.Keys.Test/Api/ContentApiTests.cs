/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.Crypto.Keys.Client;
using Sphereon.SDK.Crypto.Keys.Api;
using Sphereon.SDK.Crypto.Keys.Model;

namespace Sphereon.SDK.Crypto.Keys.Test
{
    /// <summary>
    ///  Class for testing ContentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ContentApiTests
    {
        private ContentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ContentApi
            //Assert.IsInstanceOfType(typeof(ContentApi), instance, "instance is a ContentApi");
        }

        
        /// <summary>
        /// Test DecryptUsingKey
        /// </summary>
        [Test]
        public void DecryptUsingKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string config = null;
            //string name = null;
            //string version = null;
            //KeyDecryptRequest request = null;
            //var response = instance.DecryptUsingKey(config, name, version, request);
            //Assert.IsInstanceOf<KeyDecryptResponse> (response, "response is KeyDecryptResponse");
        }
        
        /// <summary>
        /// Test EncryptUsingKey
        /// </summary>
        [Test]
        public void EncryptUsingKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string config = null;
            //string name = null;
            //string version = null;
            //KeyEncryptRequest request = null;
            //var response = instance.EncryptUsingKey(config, name, version, request);
            //Assert.IsInstanceOf<KeyEncryptResponse> (response, "response is KeyEncryptResponse");
        }
        
        /// <summary>
        /// Test SignUsingKey
        /// </summary>
        [Test]
        public void SignUsingKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string config = null;
            //string name = null;
            //string version = null;
            //KeySignRequest request = null;
            //var response = instance.SignUsingKey(config, name, version, request);
            //Assert.IsInstanceOf<KeySignResponse> (response, "response is KeySignResponse");
        }
        
        /// <summary>
        /// Test VerifyUsingKey
        /// </summary>
        [Test]
        public void VerifyUsingKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string config = null;
            //string name = null;
            //string version = null;
            //KeyVerifyRequest request = null;
            //var response = instance.VerifyUsingKey(config, name, version, request);
            //Assert.IsInstanceOf<KeyVerifyResponse> (response, "response is KeyVerifyResponse");
        }
        
    }

}
