/* 
 * Crypto Keys
 *
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Sphereon.SDK.Crypto.Keys.Api;
using Sphereon.SDK.Crypto.Keys.Model;
using Sphereon.SDK.Crypto.Keys.Client;
using System.Reflection;

namespace Sphereon.SDK.Crypto.Keys.Test
{
    /// <summary>
    ///  Class for testing CreateKeyRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class CreateKeyRequestTests
    {
        // TODO uncomment below to declare an instance variable for CreateKeyRequest
        //private CreateKeyRequest instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of CreateKeyRequest
            //instance = new CreateKeyRequest();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CreateKeyRequest
        /// </summary>
        [Test]
        public void CreateKeyRequestInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" CreateKeyRequest
            //Assert.IsInstanceOfType<CreateKeyRequest> (instance, "variable 'instance' is a CreateKeyRequest");
        }

        /// <summary>
        /// Test the property 'Kty'
        /// </summary>
        [Test]
        public void KtyTest()
        {
            // TODO unit test for the property 'Kty'
        }
        /// <summary>
        /// Test the property 'ApplicationMetadata'
        /// </summary>
        [Test]
        public void ApplicationMetadataTest()
        {
            // TODO unit test for the property 'ApplicationMetadata'
        }
        /// <summary>
        /// Test the property 'Crv'
        /// </summary>
        [Test]
        public void CrvTest()
        {
            // TODO unit test for the property 'Crv'
        }
        /// <summary>
        /// Test the property 'KeyOps'
        /// </summary>
        [Test]
        public void KeyOpsTest()
        {
            // TODO unit test for the property 'KeyOps'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Test]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'Attributes'
        /// </summary>
        [Test]
        public void AttributesTest()
        {
            // TODO unit test for the property 'Attributes'
        }
        /// <summary>
        /// Test the property 'KeySize'
        /// </summary>
        [Test]
        public void KeySizeTest()
        {
            // TODO unit test for the property 'KeySize'
        }

    }

}
