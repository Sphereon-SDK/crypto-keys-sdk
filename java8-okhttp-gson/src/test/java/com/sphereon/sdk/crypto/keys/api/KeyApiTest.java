/*
 * Crypto Keys
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.crypto.keys.api;

import com.sphereon.sdk.crypto.keys.handler.ApiException;
import com.sphereon.sdk.crypto.keys.model.CreateKeyRequest;
import com.sphereon.sdk.crypto.keys.model.DeletedKeyBundleResponse;
import com.sphereon.sdk.crypto.keys.model.ImportKeyRequest;
import com.sphereon.sdk.crypto.keys.model.KeyBundle;
import com.sphereon.sdk.crypto.keys.model.KeyBundleResponse;
import com.sphereon.sdk.crypto.keys.model.KeyMetadataListResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KeyApi
 */
@Ignore
public class KeyApiTest {

    private final KeyApi api = new KeyApi();

    
    /**
     * Create key
     *
     * Creates a new key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKeyTest() throws ApiException {
        String config = null;
        CreateKeyRequest request = null;
        KeyBundle response = api.createKey(config, request);

        // TODO: test validations
    }
    
    /**
     * Delete key
     *
     * Deletes a key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKeyTest() throws ApiException {
        String config = null;
        String name = null;
        DeletedKeyBundleResponse response = api.deleteKey(config, name);

        // TODO: test validations
    }
    
    /**
     * Get key information
     *
     * Gets information about a key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKeyTest() throws ApiException {
        String config = null;
        String name = null;
        String version = null;
        KeyBundleResponse response = api.getKey(config, name, version);

        // TODO: test validations
    }
    
    /**
     * Import key
     *
     * Imports a new key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importKeyTest() throws ApiException {
        String config = null;
        ImportKeyRequest request = null;
        KeyBundle response = api.importKey(config, request);

        // TODO: test validations
    }
    
    /**
     * List keys metadata information
     *
     * Gets a list of all key metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listKeysTest() throws ApiException {
        String config = null;
        KeyMetadataListResponse response = api.listKeys(config);

        // TODO: test validations
    }
    
}
