/*
 * Crypto Keys
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.crypto.keys.api;

import com.sphereon.sdk.crypto.keys.handler.ApiException;
import com.sphereon.sdk.crypto.keys.model.ConfigurationResponse;
import com.sphereon.sdk.crypto.keys.model.CreateConfigurationRequest;
import com.sphereon.sdk.crypto.keys.model.UpdateConfigurationRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigApi
 */
@Ignore
public class ConfigApiTest {

    private final ConfigApi api = new ConfigApi();

    
    /**
     * Create a new Configuration
     *
     * Create a new crypto key configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigurationTest() throws ApiException {
        CreateConfigurationRequest request = null;
        ConfigurationResponse response = api.createConfiguration(request);

        // TODO: test validations
    }
    
    /**
     * Delete Configuration
     *
     * Delete an existing configuration. As a protection this can only be done using the configuration Id and this not the name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigurationTest() throws ApiException {
        String config = null;
        ConfigurationResponse response = api.deleteConfiguration(config);

        // TODO: test validations
    }
    
    /**
     * Get Configuration
     *
     * Get existing configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigurationTest() throws ApiException {
        String config = null;
        ConfigurationResponse response = api.getConfiguration(config);

        // TODO: test validations
    }
    
    /**
     * Update Configuration
     *
     * Update an existing configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        String config = null;
        UpdateConfigurationRequest request = null;
        ConfigurationResponse response = api.updateConfiguration(config, request);

        // TODO: test validations
    }
    
}
