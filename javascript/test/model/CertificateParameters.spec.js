/**
 * Crypto Keys
 * The Crypto Keys API allows you to import, create and work with symmetric and asymmetric keys and certificates to sign/verify digest values, encrypt/decrypt input, or hash and sign input values. The benefit is that you don't have to store secret keys in your application.  The API has an integration with Azure KeyVault, allowing you to store keys, secrets and certificates in FIPS 140-2 Level 2 validated Hardware Security Modules (HSM). The key will never leave the HSM, making it really secure, especially if you combine it with IP whitelisting      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CryptoKeys);
  }
}(this, function(expect, CryptoKeys) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CryptoKeys.CertificateParameters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CertificateParameters', function() {
    it('should create an instance of CertificateParameters', function() {
      // uncomment below and update the code to test CertificateParameters
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be.a(CryptoKeys.CertificateParameters);
    });

    it('should have the property csr (base name: "csr")', function() {
      // uncomment below and update the code to test the property csr
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "requestId")', function() {
      // uncomment below and update the code to test the property requestId
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

    it('should have the property certificateId (base name: "certificateId")', function() {
      // uncomment below and update the code to test the property certificateId
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

    it('should have the property statusDetails (base name: "statusDetails")', function() {
      // uncomment below and update the code to test the property statusDetails
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

    it('should have the property issuerParameters (base name: "issuerParameters")', function() {
      // uncomment below and update the code to test the property issuerParameters
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instane = new CryptoKeys.CertificateParameters();
      //expect(instance).to.be();
    });

  });

}));
